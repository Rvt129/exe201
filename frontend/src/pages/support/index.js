import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Navbar from "../../components/layout/Navbar";
import "./Support.css";
import {
  FiHeadphones,
  FiMail,
  FiPhone,
  FiMessageCircle,
  FiClock,
  FiMapPin,
  FiSearch,
  FiChevronDown,
  FiChevronUp,
  FiUsers,
  FiTruck,
  FiCreditCard,
  FiPackage,
  FiStar,
  FiHeart,
} from "react-icons/fi";
import { MdDesignServices, MdPets } from "react-icons/md";

const SupportPage = () => {
  const [activeTab, setActiveTab] = useState("faq");
  const [searchQuery, setSearchQuery] = useState("");
  const [expandedFAQ, setExpandedFAQ] = useState(null);
  const [contactForm, setContactForm] = useState({
    name: "",
    email: "",
    subject: "",
    category: "",
    message: "",
    priority: "normal",
  });
  const navigate = useNavigate();

  // FAQ Data
  const faqData = {
    general: [
      {
        id: 1,
        question: "PawPal Custom l√† g√¨?",
        answer:
          "PawPal Custom l√† n·ªÅn t·∫£ng thi·∫øt k·∫ø v√† in ·∫•n √°o th√∫ c∆∞ng theo y√™u c·∫ßu. Ch√∫ng t√¥i cung c·∫•p c√¥ng c·ª• thi·∫øt k·∫ø tr·ª±c tuy·∫øn ƒë·ªÉ b·∫°n t·∫°o ra nh·ªØng chi·∫øc √°o ƒë·ªôc ƒë√°o cho th√∫ c∆∞ng c·ªßa m√¨nh v·ªõi ch·∫•t l∆∞·ª£ng cao v√† gi√° c·∫£ h·ª£p l√Ω.",
      },
      {
        id: 2,
        question: "L√†m th·∫ø n√†o ƒë·ªÉ b·∫Øt ƒë·∫ßu thi·∫øt k·∫ø?",
        answer:
          "R·∫•t ƒë∆°n gi·∫£n! B·∫°n ch·ªâ c·∫ßn: 1) ƒêƒÉng k√Ω t√†i kho·∫£n mi·ªÖn ph√≠, 2) Ch·ªçn s·∫£n ph·∫©m v√† m√†u s·∫Øc, 3) S·ª≠ d·ª•ng c√¥ng c·ª• thi·∫øt k·∫ø ƒë·ªÉ t·∫°o m·∫´u, 4) Xem tr∆∞·ªõc v√† ƒë·∫∑t h√†ng. To√†n b·ªô qu√° tr√¨nh ch·ªâ m·∫•t v√†i ph√∫t!",
      },
      {
        id: 3,
        question: "C√≥ c·∫ßn kinh nghi·ªám thi·∫øt k·∫ø kh√¥ng?",
        answer:
          "Ho√†n to√†n kh√¥ng! C√¥ng c·ª• thi·∫øt k·∫ø c·ªßa ch√∫ng t√¥i ƒë∆∞·ª£c thi·∫øt k·∫ø th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng. B·∫°n c√≥ th·ªÉ k√©o th·∫£, th√™m text, h√¨nh ·∫£nh v√† c√°c hi·ªáu ·ª©ng m·ªôt c√°ch d·ªÖ d√†ng m√† kh√¥ng c·∫ßn ki·∫øn th·ª©c chuy√™n m√¥n.",
      },
    ],
    orders: [
      {
        id: 4,
        question: "Th·ªùi gian x·ª≠ l√Ω v√† giao h√†ng?",
        answer:
          "Th·ªùi gian x·ª≠ l√Ω: 2-3 ng√†y l√†m vi·ªác. Th·ªùi gian giao h√†ng: 3-5 ng√†y (n·ªôi th√†nh), 5-7 ng√†y (ngo·∫°i th√†nh). Ch√∫ng t√¥i s·∫Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng qua email v√† SMS.",
      },
      {
        id: 5,
        question: "C√≥ th·ªÉ thay ƒë·ªïi ƒë∆°n h√†ng sau khi ƒë·∫∑t?",
        answer:
          "B·∫°n c√≥ th·ªÉ thay ƒë·ªïi ƒë∆°n h√†ng trong v√≤ng 2 gi·ªù sau khi ƒë·∫∑t h√†ng n·∫øu ƒë∆°n h√†ng ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω. Vui l√≤ng li√™n h·ªá ngay v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£ ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.",
      },
      {
        id: 6,
        question: "Ch√≠nh s√°ch ho√†n tr·∫£ nh∆∞ th·∫ø n√†o?",
        answer:
          "Ch√∫ng t√¥i h·ªó tr·ª£ ho√†n tr·∫£ trong 7 ng√†y n·∫øu s·∫£n ph·∫©m c√≥ l·ªói do nh√† s·∫£n xu·∫•t. V·ªõi s·∫£n ph·∫©m thi·∫øt k·∫ø theo y√™u c·∫ßu, ch√∫ng t√¥i ch·ªâ ho√†n tr·∫£ khi c√≥ l·ªói in ·∫•n ho·∫∑c ch·∫•t l∆∞·ª£ng v·∫£i.",
      },
    ],
    technical: [
      {
        id: 7,
        question: "ƒê·ªãnh d·∫°ng file n√†o ƒë∆∞·ª£c h·ªó tr·ª£?",
        answer:
          "Ch√∫ng t√¥i h·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: PNG, JPG, JPEG, SVG. ƒê·ªô ph√¢n gi·∫£i t·ªëi thi·ªÉu 300 DPI cho ch·∫•t l∆∞·ª£ng in t·ªët nh·∫•t. File kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 10MB.",
      },
      {
        id: 8,
        question: "L√†m sao ƒë·ªÉ thi·∫øt k·∫ø c√≥ ch·∫•t l∆∞·ª£ng t·ªët?",
        answer:
          "ƒê·ªÉ c√≥ ch·∫•t l∆∞·ª£ng in t·ªët nh·∫•t: 1) S·ª≠ d·ª•ng h√¨nh ·∫£nh ƒë·ªô ph√¢n gi·∫£i cao, 2) Tr√°nh s·ª≠ d·ª•ng qu√° nhi·ªÅu m√†u s·∫Øc, 3) ƒê·∫£m b·∫£o text c√≥ k√≠ch th∆∞·ªõc ƒë·ªß l·ªõn, 4) S·ª≠ d·ª•ng m√†u t∆∞∆°ng ph·∫£n cao.",
      },
      {
        id: 9,
        question: "C√≥ th·ªÉ in tr√™n c·∫£ hai m·∫∑t kh√¥ng?",
        answer:
          "Hi·ªán t·∫°i ch√∫ng t√¥i ch·ªâ h·ªó tr·ª£ in m·ªôt m·∫∑t ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng v√† ƒë·ªô b·ªÅn t·ªët nh·∫•t. Ch√∫ng t√¥i ƒëang ph√°t tri·ªÉn t√≠nh nƒÉng in hai m·∫∑t trong t∆∞∆°ng lai.",
      },
    ],
    sizing: [
      {
        id: 10,
        question: "L√†m sao ƒë·ªÉ ch·ªçn size ph√π h·ª£p?",
        answer:
          "H√£y ƒëo k√≠ch th∆∞·ªõc th√∫ c∆∞ng: chi·ªÅu d√†i l∆∞ng (t·ª´ c·ªï ƒë·∫øn g·ªëc ƒëu√¥i), v√≤ng ng·ª±c (ph·∫ßn r·ªông nh·∫•t). So s√°nh v·ªõi b·∫£ng size c·ªßa ch√∫ng t√¥i. Khi nghi ng·ªù, h√£y ch·ªçn size l·ªõn h∆°n m·ªôt ch√∫t.",
      },
      {
        id: 11,
        question: "N·∫øu ch·ªçn nh·∫ßm size th√¨ sao?",
        answer:
          "N·∫øu s·∫£n ph·∫©m kh√¥ng v·ª´a, b·∫°n c√≥ th·ªÉ ƒë·ªïi size trong v√≤ng 7 ng√†y (s·∫£n ph·∫©m ch∆∞a s·ª≠ d·ª•ng, c√≤n nguy√™n tag). Chi ph√≠ v·∫≠n chuy·ªÉn ƒë·ªïi h√†ng s·∫Ω ƒë∆∞·ª£c ch√∫ng t√¥i h·ªó tr·ª£ 50%.",
      },
    ],
  };

  // Contact categories
  const contactCategories = [
    { value: "general", label: "C√¢u h·ªèi chung" },
    { value: "order", label: "V·∫•n ƒë·ªÅ ƒë∆°n h√†ng" },
    { value: "technical", label: "H·ªó tr·ª£ k·ªπ thu·∫≠t" },
    { value: "billing", label: "Thanh to√°n & H√≥a ƒë∆°n" },
    { value: "feedback", label: "G√≥p √Ω & Ph·∫£n h·ªìi" },
  ];

  // Filter FAQs based on search
  const getFilteredFAQs = () => {
    if (!searchQuery) return faqData;

    const filtered = {};
    Object.keys(faqData).forEach((category) => {
      const filteredItems = faqData[category].filter(
        (faq) =>
          faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
          faq.answer.toLowerCase().includes(searchQuery.toLowerCase())
      );
      if (filteredItems.length > 0) {
        filtered[category] = filteredItems;
      }
    });
    return filtered;
  };

  const handleFAQToggle = (id) => {
    setExpandedFAQ(expandedFAQ === id ? null : id);
  };

  const handleContactSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(
        "http://localhost:5000/api/support/contact",
        contactForm
      );

      if (response.status === 201) {
        alert("C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong 24 gi·ªù.");
        setContactForm({
          name: "",
          email: "",
          subject: "",
          category: "",
          message: "",
          priority: "normal",
        });
      }
    } catch (error) {
      // Log chi ti·∫øt l·ªói ƒë·ªÉ bi·∫øt ƒëang sai g√¨
      if (error.response) {
        console.error("üìç Backend tr·∫£ v·ªÅ l·ªói:", error.response.data);
        console.error("üìç Status:", error.response.status);
      } else if (error.request) {
        console.error("üìç Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server:", error.request);
      } else {
        console.error("üìç L·ªói khi thi·∫øt l·∫≠p y√™u c·∫ßu:", error.message);
      }

      alert("C√≥ l·ªói x·∫£y ra khi g·ª≠i y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
  };

  const renderFAQSection = () => {
    const filteredFAQs = getFilteredFAQs();

    return (
      <div className="faq-section">
        <div className="section-header">
          <h2>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h2>
          <p>T√¨m c√¢u tr·∫£ l·ªùi nhanh ch√≥ng cho c√°c th·∫Øc m·∫Øc ph·ªï bi·∫øn</p>
        </div>

        <div className="faq-search">
          <div className="search-box">
            <FiSearch className="search-icon" />
            <input
              type="text"
              placeholder="T√¨m ki·∫øm c√¢u h·ªèi..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>

        <div className="faq-content">
          {Object.keys(filteredFAQs).map((category) => (
            <div key={category} className="faq-category">
              <h3 className="category-title">
                {category === "general" && "C√¢u h·ªèi chung"}
                {category === "orders" && "ƒê∆°n h√†ng & Giao h√†ng"}
                {category === "technical" && "H·ªó tr·ª£ k·ªπ thu·∫≠t"}
                {category === "sizing" && "H∆∞·ªõng d·∫´n ch·ªçn size"}
              </h3>

              <div className="faq-list">
                {filteredFAQs[category].map((faq) => (
                  <div
                    key={faq.id}
                    className={`faq-item ${
                      expandedFAQ === faq.id ? "active" : ""
                    }`}
                  >
                    <button
                      className="faq-question"
                      onClick={() => handleFAQToggle(faq.id)}
                    >
                      <span>{faq.question}</span>
                      {expandedFAQ === faq.id ? (
                        <FiChevronUp />
                      ) : (
                        <FiChevronDown />
                      )}
                    </button>
                    {expandedFAQ === faq.id && (
                      <div className="faq-answer">
                        <p>{faq.answer}</p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  const renderContactSection = () => (
    <div className="contact-section">
      <div className="section-header">
        <h2>Li√™n h·ªá h·ªó tr·ª£</h2>
        <p>ƒê·ªôi ng≈© h·ªó tr·ª£ chuy√™n nghi·ªáp lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n</p>
      </div>

      <div className="contact-grid">
        <div className="contact-methods">
          <h3>C√°c k√™nh h·ªó tr·ª£</h3>

          <div className="contact-method">
            <div className="method-icon">
              <FiPhone />
            </div>
            <div className="method-info">
              <h4>Hotline 24/7</h4>
              <p>1900 1234</p>
              <small>Mi·ªÖn ph√≠ t·ª´ ƒëi·ªán tho·∫°i c·ªë ƒë·ªãnh</small>
            </div>
          </div>

          <div className="contact-method">
            <div className="method-icon">
              <FiMail />
            </div>
            <div className="method-info">
              <h4>Email h·ªó tr·ª£</h4>
              <p>support@pawpalcustom.com</p>
              <small>Ph·∫£n h·ªìi trong 2-4 gi·ªù</small>
            </div>
          </div>

          <div className="contact-method">
            <div className="method-icon">
              <FiMessageCircle />
            </div>
            <div className="method-info">
              <h4>Live Chat</h4>
              <p>Tr√≤ chuy·ªán tr·ª±c ti·∫øp</p>
              <small>8:00 - 22:00 h√†ng ng√†y</small>
            </div>
          </div>

          <div className="support-hours">
            <h4>
              <FiClock /> Gi·ªù h·ªó tr·ª£
            </h4>
            <div className="hours-list">
              <div className="hours-item">
                <span>Th·ª© 2 - Th·ª© 6:</span>
                <span>8:00 - 22:00</span>
              </div>
              <div className="hours-item">
                <span>Th·ª© 7 - Ch·ªß nh·∫≠t:</span>
                <span>9:00 - 21:00</span>
              </div>
            </div>
          </div>
        </div>

        <div className="contact-form-container">
          <form className="contact-form" onSubmit={handleContactSubmit}>
            <div className="form-group">
              <label>H·ªç v√† t√™n *</label>
              <input
                type="text"
                required
                value={contactForm.name}
                onChange={(e) =>
                  setContactForm({ ...contactForm, name: e.target.value })
                }
                placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
              />
            </div>

            <div className="form-group">
              <label>Email *</label>
              <input
                type="email"
                required
                value={contactForm.email}
                onChange={(e) =>
                  setContactForm({ ...contactForm, email: e.target.value })
                }
                placeholder="email@example.com"
              />
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>Danh m·ª•c</label>
                <select
                  value={contactForm.category}
                  onChange={(e) =>
                    setContactForm({ ...contactForm, category: e.target.value })
                  }
                >
                  <option value="">Ch·ªçn danh m·ª•c</option>
                  {contactCategories.map((cat) => (
                    <option key={cat.value} value={cat.value}>
                      {cat.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <label>ƒê·ªô ∆∞u ti√™n</label>
                <select
                  value={contactForm.priority}
                  onChange={(e) =>
                    setContactForm({ ...contactForm, priority: e.target.value })
                  }
                >
                  <option value="low">Th·∫•p</option>
                  <option value="normal">B√¨nh th∆∞·ªùng</option>
                  <option value="high">Cao</option>
                  <option value="urgent">Kh·∫©n c·∫•p</option>
                </select>
              </div>
            </div>

            <div className="form-group">
              <label>Ti√™u ƒë·ªÅ *</label>
              <input
                type="text"
                required
                value={contactForm.subject}
                onChange={(e) =>
                  setContactForm({ ...contactForm, subject: e.target.value })
                }
                placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·∫•n ƒë·ªÅ c·ªßa b·∫°n"
              />
            </div>

            <div className="form-group">
              <label>N·ªôi dung *</label>
              <textarea
                required
                rows={6}
                value={contactForm.message}
                onChange={(e) =>
                  setContactForm({ ...contactForm, message: e.target.value })
                }
                placeholder="M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ ho·∫∑c c√¢u h·ªèi c·ªßa b·∫°n..."
              />
            </div>

            <button type="submit" className="submit-btn">
              <FiMail />
              G·ª≠i y√™u c·∫ßu h·ªó tr·ª£
            </button>
          </form>
        </div>
      </div>
    </div>
  );

  const renderGuidesSection = () => (
    <div className="guides-section">
      <div className="section-header">
        <h2>H∆∞·ªõng d·∫´n & T√†i li·ªáu</h2>
        <p>T√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i m·ªôt c√°ch hi·ªáu qu·∫£</p>
      </div>

      <div className="guides-grid">
        <div className="guide-card">
          <div className="guide-icon">
            <MdDesignServices />
          </div>
          <h3>H∆∞·ªõng d·∫´n thi·∫øt k·∫ø</h3>
          <p>
            H·ªçc c√°ch s·ª≠ d·ª•ng c√¥ng c·ª• thi·∫øt k·∫ø ƒë·ªÉ t·∫°o ra nh·ªØng m·∫´u √°o ƒë·ªôc ƒë√°o
          </p>
          <div className="guide-links">
            <a href="/guides/design-basics">C∆° b·∫£n v·ªÅ thi·∫øt k·∫ø</a>
            <a href="/guides/design-tips">M·∫πo thi·∫øt k·∫ø hay</a>
            <a href="/guides/color-theory">L√Ω thuy·∫øt m√†u s·∫Øc</a>
          </div>
        </div>

        <div className="guide-card">
          <div className="guide-icon">
            <MdPets />
          </div>
          <h3>H∆∞·ªõng d·∫´n ch·ªçn size</h3>
          <p>C√°ch ƒëo v√† ch·ªçn k√≠ch th∆∞·ªõc ph√π h·ª£p cho t·ª´ng lo·∫°i th√∫ c∆∞ng</p>
          <div className="guide-links">
            <a href="/guides/measure-pet">C√°ch ƒëo th√∫ c∆∞ng</a>
            <a href="/guides/size-chart">B·∫£ng size chi ti·∫øt</a>
            <a href="/guides/fit-tips">L·ªùi khuy√™n v·ªÅ ƒë·ªô v·ª´a v·∫∑n</a>
          </div>
        </div>

        <div className="guide-card">
          <div className="guide-icon">
            <FiPackage />
          </div>
          <h3>Quy tr√¨nh ƒë·∫∑t h√†ng</h3>
          <p>T·ª´ thi·∫øt k·∫ø ƒë·∫øn nh·∫≠n h√†ng - t·∫•t c·∫£ nh·ªØng g√¨ b·∫°n c·∫ßn bi·∫øt</p>
          <div className="guide-links">
            <a href="/guides/ordering">C√°ch ƒë·∫∑t h√†ng</a>
            <a href="/guides/payment">Ph∆∞∆°ng th·ª©c thanh to√°n</a>
            <a href="/guides/shipping">V·∫≠n chuy·ªÉn & Giao h√†ng</a>
          </div>
        </div>

        <div className="guide-card">
          <div className="guide-icon">
            <FiTruck />
          </div>
          <h3>ChƒÉm s√≥c s·∫£n ph·∫©m</h3>
          <p>H∆∞·ªõng d·∫´n b·∫£o qu·∫£n ƒë·ªÉ s·∫£n ph·∫©m b·ªÅn ƒë·∫πp theo th·ªùi gian</p>
          <div className="guide-links">
            <a href="/guides/care">H∆∞·ªõng d·∫´n gi·∫∑t ·ªßi</a>
            <a href="/guides/storage">C√°ch b·∫£o qu·∫£n</a>
            <a href="/guides/troubleshooting">X·ª≠ l√Ω s·ª± c·ªë</a>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <>
      <Navbar />
      <div className="support-page">
        {/* Hero Section */}
        <div className="support-hero">
          <div className="hero-content">
            <div className="hero-text">
              <h1>
                <FiHeadphones className="hero-icon" />
                Trung t√¢m h·ªó tr·ª£
              </h1>
              <p>
                Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7 v·ªõi ƒë·ªôi ng≈© chuy√™n
                nghi·ªáp v√† t·∫≠n t√¢m
              </p>
            </div>
            <div className="hero-stats">
              <div className="stat-item">
                <FiUsers />
                <div>
                  <span className="stat-number">50,000+</span>
                  <span className="stat-label">Kh√°ch h√†ng h√†i l√≤ng</span>
                </div>
              </div>
              <div className="stat-item">
                <FiStar />
                <div>
                  <span className="stat-number">4.9/5</span>
                  <span className="stat-label">ƒê√°nh gi√° d·ªãch v·ª•</span>
                </div>
              </div>
              <div className="stat-item">
                <FiHeart />
                <div>
                  <span className="stat-number">2 gi·ªù</span>
                  <span className="stat-label">Th·ªùi gian ph·∫£n h·ªìi</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Quick Help Section */}
        <div className="quick-help">
          <div className="container">
            <h2>H·ªó tr·ª£ nhanh</h2>
            <div className="quick-help-grid">
              <button
                className="quick-help-card"
                onClick={() => setActiveTab("faq")}
              >
                <FiSearch />
                <h3>T√¨m c√¢u tr·∫£ l·ªùi</h3>
                <p>T√¨m ki·∫øm trong FAQ</p>
              </button>
              <button
                className="quick-help-card"
                onClick={() => setActiveTab("contact")}
              >
                <FiMessageCircle />
                <h3>Li√™n h·ªá h·ªó tr·ª£</h3>
                <p>G·ª≠i y√™u c·∫ßu h·ªó tr·ª£</p>
              </button>
              <button
                className="quick-help-card"
                onClick={() => setActiveTab("guides")}
              >
                <FiPackage />
                <h3>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h3>
                <p>T√†i li·ªáu & video</p>
              </button>
              <button
                className="quick-help-card"
                onClick={() => window.open("tel:19001234")}
              >
                <FiPhone />
                <h3>G·ªçi hotline</h3>
                <p>1900 1234</p>
              </button>
            </div>
          </div>
        </div>

        {/* Tabs Navigation */}
        <div className="support-tabs">
          <div className="container">
            <div className="tabs-nav">
              <button
                className={`tab-btn ${activeTab === "faq" ? "active" : ""}`}
                onClick={() => setActiveTab("faq")}
              >
                <FiSearch />
                FAQ
              </button>
              <button
                className={`tab-btn ${activeTab === "contact" ? "active" : ""}`}
                onClick={() => setActiveTab("contact")}
              >
                <FiMail />
                Li√™n h·ªá
              </button>
              <button
                className={`tab-btn ${activeTab === "guides" ? "active" : ""}`}
                onClick={() => setActiveTab("guides")}
              >
                <FiPackage />
                H∆∞·ªõng d·∫´n
              </button>
            </div>
          </div>
        </div>

        {/* Tab Content */}
        <div className="support-content">
          <div className="container">
            {activeTab === "faq" && renderFAQSection()}
            {activeTab === "contact" && renderContactSection()}
            {activeTab === "guides" && renderGuidesSection()}
          </div>
        </div>

        {/* Contact Info Footer */}
        <div className="support-footer">
          <div className="container">
            <div className="footer-content">
              <div className="footer-section">
                <h3>Li√™n h·ªá tr·ª±c ti·∫øp</h3>
                <div className="contact-info">
                  <div className="contact-item">
                    <FiPhone />
                    <span>Hotline: 1900 1234</span>
                  </div>
                  <div className="contact-item">
                    <FiMail />
                    <span>Email: support@pawpalcustom.com</span>
                  </div>
                  <div className="contact-item">
                    <FiMapPin />
                    <span>ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM</span>
                  </div>
                </div>
              </div>

              <div className="footer-section">
                <h3>Cam k·∫øt d·ªãch v·ª•</h3>
                <ul>
                  <li>‚úì H·ªó tr·ª£ 24/7 qua t·∫•t c·∫£ k√™nh</li>
                  <li>‚úì Ph·∫£n h·ªìi trong v√≤ng 2 gi·ªù</li>
                  <li>‚úì ƒê·ªôi ng≈© chuy√™n nghi·ªáp, t·∫≠n t√¢m</li>
                  <li>‚úì Gi·∫£i quy·∫øt th·ªèa ƒë√°ng 100% v·∫•n ƒë·ªÅ</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default SupportPage;
